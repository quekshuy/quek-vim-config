
" Vim plug plugins
call plug#begin()
  " Deprecated in favor of nvim-telescope
  " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
  " Plug 'junegunn/fzf.vim'

  " Provide interface for interacting with git branches
  Plug 'idanarye/vim-merginal'
  Plug 'scrooloose/nerdcommenter'
  " GIT
  Plug 'tpope/vim-fugitive'
  ":Gbrowse to open current file on github
  Plug 'tpope/vim-rhubarb'
  " All the syntax highlighting
  Plug 'sheerun/vim-polyglot'

  " Dockerfiles
  Plug 'ekalinin/Dockerfile.vim'

  " Ruby
  Plug 'tpope/vim-rails'
  Plug 'vim-ruby/vim-ruby'
  Plug 'noprompt/vim-yardoc'

  " Javascript
  Plug 'pangloss/vim-javascript'
  Plug 'posva/vim-vue'

  " Generic coding
  Plug 'tpope/vim-surround'
  Plug 'alvan/vim-closetag'
  Plug 'tpope/vim-vinegar'
  " deprecated in favor of nvim-lspconfig + nvim-autopairs
  " Plug 'jiangmiao/auto-pairs'
  Plug 'machakann/vim-highlightedyank'

  " Other languages
  Plug 'avdgaag/vim-phoenix'
  Plug 'kchmck/vim-coffee-script'
  Plug 'elixir-lang/vim-elixir'
  Plug 'delphinus/vim-firestore'

  ":BD to close a buffer without closing the pane
  Plug 'qpkorr/vim-bufkill'

  " Alter commands in vimscript/.vimrc file
  " Allow us to rewrite some predefined commands.
  Plug 'kana/vim-altercmd'

  ":Delete, :Rename
  Plug 'tpope/vim-eunuch'

  ":Linting
  Plug 'w0rp/ale'

  "Pretty
  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/limelight.vim'

  " language server quick start
  Plug 'neovim/nvim-lspconfig'

  " autocomplete with nvim-lspconfig
  Plug 'hrsh7th/nvim-compe'

  " autopairs
  Plug 'windwp/nvim-autopairs'

  " nvim-telescope
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'

  " ====================
  " NCM2 (Deprecated)
  " No longer in use since neovim 0.5
  " now comes with LSP client built-in
  " ====================
  " ncm2 dependency
  " Plug 'roxma/nvim-yarp'
  " Autocompletion manager
  " Plug 'ncm2/ncm2'
  " ncm2 autocomplete sources
  " Plug 'ncm2/ncm2-bufword'
  " Plug 'ncm2/ncm2-path'
  " Plug 'fgrsnau/ncm2-otherbuf'
  " Plug 'ncm2/ncm2-html-subscope'
  " LanguageServer client for NeoVim.
  " For use with ncm2
  " Plug 'autozimu/LanguageClient-neovim', {
        " \ 'branch': 'next',
        " \ 'do': 'bash install.sh',
        " \ }

  Plug 'sonph/onehalf', { 'rtp': 'vim/' }
call plug#end()

" UI
colorscheme onehalfdark
set guifont=Hack:h16
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" Make vim limelight work
set termguicolors

set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
"set smartindent
set expandtab
set showmatch
set number
"set encoding=utf-8
set tags=./tags,tags
"no end of file at the end of files
set noeol

"Allow yank to macOS clipboard as well
set clipboard=unnamed
"Allows using mouse to set cursor when in Iterm
set mouse=a

nnoremap / /\v
vnoremap / /\v
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

"NERDTree replacement, netrw
let g:netrw_liststyle=3
let g:netrw_winsize=25
map <leader>n :Lexplore<cr>

"Vim Closetag
let g:closetag_filenames = "*.html,*.html.erb,*.vue"

" new tab
nnoremap <C-t> :tabnew<CR>
"Getting around tabs in neovim
nnoremap <S-h> :tabprev<cr>
nnoremap <S-l> :tabnext<cr>


" deprecate in lieu of nvim-telescope
" nnoremap <leader>b :Buffers<cr>
nnoremap <leader>w :Windows<cr>
nnoremap <leader>g :Goyo<cr>
nnoremap <leader>s :Gstatus<cr>

"=================================================================
" NEOVIM BUILT-IN LANGUAGE SERVER CLIENT
"=================================================================

lua << EOF
local nvim_lsp = require('lspconfig')

-- nvim-compe Autocomplete
vim.o.completeopt = "menuone,noselect"
require'compe'.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'enable';
  throttle_time = 80;
  source_timeout = 200;
  resolve_timeout = 800;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = {
    border = { '', '' ,'', ' ', '', '', '', ' ' }, -- the border option is the same as `|help nvim_open_win|`
    winhighlight = "NormalFloat:CompeDocumentation,FloatBorder:CompeDocumentationBorder",
    max_width = 120,
    min_width = 60,
    max_height = math.floor(vim.o.lines * 0.3),
    min_height = 1,
    };

  source = {
    path = true;
    buffer = true;
    calc = true;
    nvim_lsp = true;
    nvim_lua = true;
    vsnip = true;
    ultisnips = true;
    luasnip = true;
    };
}

-- nvim-compe
-- mappings: use Tab / <S-Tab> to navigate autocompletion menu
local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = vim.fn.col('.') - 1
    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil
end

-- Use (s-)tab to:
--- move to prev/next item in completion menuone
--- jump to prev/next snippet's placeholder
_G.tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-n>"
  elseif vim.fn['vsnip#available'](1) == 1 then
    return t "<Plug>(vsnip-expand-or-jump)"
  elseif check_back_space() then
    return t "<Tab>"
  else
    return vim.fn['compe#complete']()
  end
end

_G.s_tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-p>"
  elseif vim.fn['vsnip#jumpable'](-1) == 1 then
    return t "<Plug>(vsnip-jump-prev)"
  else
    -- If <S-Tab> is not working in your terminal, change it to <C-h>
    return t "<S-Tab>"
  end
end

vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})

-- nvim-compe
-- automatically select the first match when none has been selected.
vim.api.nvim_set_keymap("i", "<CR>", "compe#confirm({ 'keys': '<CR>', 'select': v:true })", { expr = true })

-- nvim-compe and nvim-autopairs
require"nvim-autopairs.completion.compe".setup {
  map_cr = true, --  map <CR> on insert mode
  map_complete = true, -- it will auto insert `(` after select function or method item
  auto_select = false,  -- auto select first item
}


-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  -- buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  -- buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  -- buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  -- buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  -- buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  -- buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "solargraph", "tsserver", "vls" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF


"=================================================================
" NVIM-COMPE + NVIM-AUTOPAIRS
"=================================================================
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm(luaeval("require 'nvim-autopairs'.autopairs_cr()"))
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

"=================================================================
" NVIM-TELESCOPE
"=================================================================
nnoremap <C-p> <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>b <cmd>lua require('telescope.builtin').buffers()<cr>

"=================================================================
" NCM2 AUTOCOMPLETION
"=================================================================
"ncm2 (autocomplete)
" autocmd BufEnter * call ncm2#enable_for_buffer()
" IMPORTANT: :help Ncm2PopupOpen for more information
" set completeopt=noinsert,menuone,noselect


" JAVASCRIPT
" yarn global add javascript-typescript-langserver
"
" TYPESCRIPT
" yarn global add typescript-language-server
"
" RUBY (SOLARGRAPH)
" gem install solargraph
"
" VUE
" yarn global add vue-language-server
"
" let g:LanguageClient_serverCommands = {
  " \ 'typescript': ['typescript-language-server', '--stdio'],
  " \ 'javascript': ['javascript-typescript-stdio'],
  " \ 'javascript.jsx': ['javascript-typescript-stdio'],
  " \ 'ruby': ['solargraph', 'stdio'],
  " \ 'vue': ['vls']
  " \ }
" Language servers need a settings file (similar to that in VSCode).
" let g:LanguageClient_settingsPath = '/Users/syquek/.vim/settings.json'
" Uncomment the below to do debugging
"let g:LanguageClient_windowLogMessageLevel = 'Log'
"let g:LanguageClient_loggingLevel = 'DEBUG'
"let g:LanguageClient_loggingFile = '/tmp/LanguageClient.log'

" nnoremap <leader>lh :call LanguageClient_textDocument_hover()<CR>
" nnoremap <leader>lr :call LanguageClient_textDocument_rename()<CR>
" nnoremap <leader>la :call LanguageClient_textDocument_codeAction()<CR>
" nnoremap <leader>ld :call LanguageClient_textDocument_definition()<CR>

" Puts a column to the left of line numbers
set signcolumn=yes


"=================================================================
" FILE SEARCH
"=================================================================
" Search all files using fzf + ripgrep
nnoremap <leader>a :Rg<cr>
" When using Rg to search, does not match file names, just file contents
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
" When using Ag to search, does not match file names, just file contents
"command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

"=================================================================
" BUFFER MANAGEMENT
"=================================================================
"Don't use vbufkill's keyboard mapping because
"they slow down responsiveness of :Buffers
let g:BufKillCreateMappings=0


"=================================================================
" VIM POLYGLOT SYNTAX HIGHLIGHTING
"=================================================================
syntax on
" To disable polyglot highlighting
"let g:polyglot_disabled = ['css']


"=================================================================
" NERD COMMENTER
"=================================================================
filetype plugin on
" Adds a space after comment symbols
let NERDSpaceDelims=1

"=================================================================
" ALE (LINTING)
"=================================================================
" Instructions for installing linters/fixers:
"
" JAVASCRIPT
" > yarn global add prettier prettier-standard eslint
"
" RUBY
" > sudo gem install standard
"
" CSS
" > yarn global add stylelint stylelint-scss
let g:ale_linter_aliases = { 'vue': ['vue', 'javascript', 'scss'] }
let g:ale_fixers = {
      \ 'typescript': ['prettier'],
      \ 'javascript': ['prettier'],
      \ 'python': ['autopep8'],
      \ 'ruby': ['standardrb'],
      \ 'vue': ['eslint','prettier'],
      \ 'dockerfile': ['hadolint'],
      \ '*': ['remove_trailing_lines', 'trim_whitespace']
      \ }
let g:ale_linters = {
      \ 'typescript': ['eslint'],
      \ 'javascript': ['eslint'],
      \ 'ruby': ['standardrb'],
      \ 'python': ['pycodestyle'],
      \ 'vue': ['eslint', 'stylelint', 'prettier']
      \ }

" Specify options to the linters
" let g:ale_vue_eslint_options = '--fix'
" let g:ale_vue_vls_options = '--stdio'

" Automatic fixing on save
let g:ale_fix_on_save = 1

"=================================================================
" CHANGES FOR NVIM TERM EMULATOR
"=================================================================
" Easy entrance into terminal mode
nnoremap <leader>t :vsp \| :term<cr>

" Map Alt-{h,j,k,l} in all modes to easily move between panes
" read this for how to map Alt-keys on a Mac
" http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
" Alt-h (on Mac)
tnoremap ˙ <C-\><C-n><C-w>h
" Alt-j (on Mac)
tnoremap ∆ <C-\><C-n><C-w>j
" Alt-k (on Mac)
tnoremap ˚ <C-\><C-n><C-w>k
" Alt-l (on Mac)
tnoremap ¬ <C-\><C-n><C-w>l

" Alt-h (on Mac)
nnoremap ˙ <C-w>h
" Alt-j (on Mac)
nnoremap ∆ <C-w>j
" Alt-k (on Mac)
nnoremap ˚ <C-w>k
" Alt-l (on Mac)
nnoremap ¬ <C-w>l

"=================================================================
" FILE TYPE SPECIFICS
"=================================================================
au FileType python setlocal sw=4 sts=4 ts=4 et
au FileType ruby setlocal nowrap sw=2 sts=2 ts=2 et
" From posva/vim-vue
autocmd FileType vue syntax sync fromstart
" Dockerfile
au BufRead,BufNewFile *.docker setfiletype Dockerfile

"=================================================================
" ONI VIM VS NORMAL NEOVIM
"=================================================================
" Experimenting with Oni (https://github.com/onivim/oni/wiki/Configuration),
" which provides some IDE like features. We turn off these same IDE features
" that exist in vim/neovim when Oni uses this config file.
"
" 1. Use Oni's file search instead of fzf for opening files.
if exists("g:gui_oni")
  "Getting around tabs in buffer mode in Onivim
  nnoremap <S-h> :bprev<cr>
  nnoremap <S-l> :bnext<cr>

  " Totally hide the status bar
  set laststatus=0
  set noshowmode
  set noruler
  set noshowcmd
else
  " Search for file using fzf
  " deprecated in lieu of nvim-telescope
  " nnoremap <C-p> :FZF<cr>

  " Always displays the status line
  set laststatus=2
  " Show git status in status line
  set statusline=%{fugitive#statusline()}
  set statusline+=%f

  "Set status line so current window is more visible
  hi StatusLine   ctermfg=15  guifg=#ffffff ctermbg=239 guibg=#4e4e4e cterm=bold gui=bold
  hi StatusLineNC ctermfg=249 guifg=#b2b2b2 ctermbg=237 guibg=#3a3a3a cterm=none gui=none

endif
